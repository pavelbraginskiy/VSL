// libc bindings for VSL
// 
// VSL is dynamically linked to libc (usually glibc) at runtime. However since
// the standard library for VSL is itself implemented in VSL. This adds a series
// of bindings, a "header" file of sorts for VSL, marking the names of which the
// functions are externally binded too. 
// 
// Note: Not all functions are binded. Only ones used in the VSL standard
// library.


/**
 * A generic type which is large enough to refer to any size of memory. Analgous
 * to C's `size_t`.
 */
public typealias CSize = UInt

/**
 * Define a CString as a char* (compiled to an i8*).
 *
 * VSL does no enforcement on ensuring these are NULL-terminated but all the
 * interface functions which create one for you do.
 *
 * If you don't add a NULL-terminator, expect things to break and not nicely.
 */
public typealias CString = Pointer<Char>

// -----------------------------------------------------------------------------
// Utility Functions
// -----------------------------------------------------------------------------

/**
 * Find the power of any two numbers. Calls the C `pow`, and `powf` to
 * perform the exponentiation.
 *
 * @param {Double|Float} base - The base of the power
 * @param {Double|Float} power - The number to raise the base by
 */
public func pow(base: Double, power: Double) -> Double external(pow)
public func pow(base: Float, power: Float) -> Float external(powf)

/**
 * Given a pointer to a CString, returns the length as an `Int`. This calls the
 * libc function `strlen`. The returned length does not include the trailing
 * NULL byte. This also counts the amount of _bytes_ (`i8`), not characters. If
 * you wish to count _characters_, use a `String` object, or alternatively a
 * `StringView` if you only wish to obtain a length count.
 *
 * @param {CString} cstring - A `CString` object which to calculate length of
 */
public func strlen(cstring: CString) -> CSize external(strlen)

/**
 * Given two CStrings, compares the two C-Strings and determines equality. This
 * calls the libc function `strcmp`
 *
 * @param {CString} s1 - The first string to compare.
 * @param {CString} s2 - The second string to compare
 *
 * @return {Int} `== 0`: The two are equal. `< 0`: `s1` < `s2`. `> 0`: `s1` > `s2`
 */
public func strcmp(s1: CString, s2: CString) -> Int external(strcmp)

/**
 * Given a CString, copies each byte of the string to the new pointer. This
 * calls the libc function `strcpy`.
 *
 * @param {CString} s1 - The source string
 * @param {CString} s2 - The destination pointer which the string will be placed
 */
public func strcpy(s1: CString, s2: CString) -> Void external(strcpy)


// -----------------------------------------------------------------------------
// IO - Stream, Files, etc.
// -----------------------------------------------------------------------------

/**
 * Used to represent a generic file type. If you wish to create one, use `fopen`
 * or refer to a standard stream object rather than attempting to manually
 * mush one together.
 */
typealias FILE = OpaquePointer

/**
 * Opens a given stream to the supplied path. Should be followed by an `fclose`
 * at the end of use. If you're using a VSL abstracted class the `deinit` will
 * automatically do that for you.
 *
 * @param {CString} filename - The relative (to the user, not the original program)
 *     path to open a stream to.
 * @param {CString} opentype - A C-type descriptor specifying how the path is opened
 *
 * @return {FILE?} file - A pointer to the `fd` opened by fopen. If this is a 
 *     null-pointer, check for errors. Using the other functions. If you don't
 *     know how to do this (because I don't), go read the C docs.
 */
public func fopen(filename: CString, opentype: CString) -> FILE external(fopen)

/**
 * This function causes stream to be closed and the connection to the
 * corresponding file to be broken. Any buffered output is written and any
 * buffered input is discarded. The fclose function returns a value of 0 if the
 * file was closed successfully, and EOF if an error was detected.
 * 
 * It is important to check for errors when you call fclose to close an output
 * stream, because real, everyday errors can be detected at this time. For
 * example, when fclose writes the remaining buffered output, it might get an
 * error because the disk is full. Even if you know the buffer is empty, errors
 * can still occur when closing a file if you are using NFS.
 *
 * @param {FILE} stream - The desired stream to close
 * 
 * @return {Int} A state specifying whether or not the stream was succesfully
 *     closed. Check this as the buffer may of not been fully written and that
 *     is usually not good.
 */
public func fclose(stream: FILE) -> Int external(fclose)
